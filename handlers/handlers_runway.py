import requests
import os
from handlers.state import user_states
from handlers.handlers_voice import handle_voice_transcription
from handlers.handlers_rewrite import handle_rewrite_transcript as handle_rewrite_text
from handlers.handlers_gpt_keywords import extract_keywords_from_text
from handlers.handlers_pexels import get_pexels_clips
from handlers.handlers_capcut_api import create_reels_from_template
from handlers.handlers_subtitles import generate_subtitles
from handlers.handlers_publish import publish_reels
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

BOT_TOKEN = os.environ.get('BOT_TOKEN')
TELEGRAM_API_URL = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
RUNWAY_API_KEY = os.environ.get("RUNWAY_API_KEY")
RUNWAY_API_URL = "https://api.runwayml.com/v1/"
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

headers = {
    "Authorization": f"Bearer {RUNWAY_API_KEY}",
    "Content-Type": "application/json"
}

def test_runway_generation(chat_id):
    prompt = "A futuristic cyberpunk city at night, flying cars, neon lights"
    payload = {
        "prompt": prompt,
        "num_frames": 24,
        "width": 512,
        "height": 512,
        "seed": 42
    }
    try:
        response = requests.post(RUNWAY_API_URL + "videos", headers=headers, json=payload)
        result = response.json()
        if response.status_code == 200:
            video_url = result.get("video_url", "‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            send_message(chat_id, f"üé¨ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∏–¥–µ–æ:\n{video_url}")
        else:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ RunwayML: {result}")
    except Exception as e:
        send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ RunwayML: {e}")

def send_message(chat_id, text):
    requests.post(TELEGRAM_API_URL, json={
        "chat_id": chat_id,
        "text": text
    })

def handle_capcut(chat_id):
    text = (
        "üé¨ –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ, —Å—Å—ã–ª–∫—É –Ω–∞ Reels –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –∏–ª–∏ YouTube-—Å—Å—ã–ª–∫—É.\n\n"
        "–Ø —Å–¥–µ–ª–∞—é –≤—Å—ë —Å–∞–º: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è ‚Üí —Ä–µ—Ä–∞–π—Ç ‚Üí –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ‚Üí –≤–∏–¥–µ–æ –∏–∑ Pexels ‚Üí —à–∞–±–ª–æ–Ω CapCut ‚Üí —Å—É–±—Ç–∏—Ç—Ä—ã ‚Üí –ø—É–±–ª–∏–∫–∞—Ü–∏—è üî•"
    )
    requests.post(TELEGRAM_API_URL, json={
        'chat_id': chat_id,
        'text': text
    })
    user_states[chat_id] = {'mode': 'capcut_generation'}

def process_capcut_pipeline(chat_id, input_data):
    try:
        video_path = download_video(input_data)
        transcript = transcribe_video(video_path, chat_id)
        rewritten_text = handle_rewrite_text(chat_id, transcript)
        keywords = extract_keywords_from_text(rewritten_text)
        pexels_clips = get_pexels_clips(keywords)
        final_video_url = create_reels_from_template(chat_id, pexels_clips, rewritten_text)
        generate_subtitles(chat_id, rewritten_text, final_video_url)
        publish_reels(chat_id, final_video_url)

        keyboard = [
            [InlineKeyboardButton("üåü –í—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å", callback_data='success')],
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard).to_dict()

        requests.post(TELEGRAM_API_URL, json={
            'chat_id': chat_id,
            'text': f"üéâ –ì–æ—Ç–æ–≤–æ! –¢–≤–æ–π Reels —Å–æ–±—Ä–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!",
            'reply_markup': reply_markup
        })

    except Exception as e:
        requests.post(TELEGRAM_API_URL, json={
            'chat_id': chat_id,
            'text': f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Reels: {e}"
        })

def download_video(input_data):
    file_id = input_data.get('video', {}).get('file_id') or input_data.get('document', {}).get('file_id')
    if not file_id:
        raise ValueError("–ù–µ—Ç file_id –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ")

    file_info = requests.get(f"{TELEGRAM_API_URL}/getFile?file_id={file_id}").json()
    file_path = file_info['result']['file_path']
    file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"

    local_path = "/tmp/video.mp4"
    with open(local_path, "wb") as f:
        f.write(requests.get(file_url).content)
    return local_path


def transcribe_video(video_path, chat_id):
    try:
        with open(video_path, "rb") as f:
            response = requests.post(
                "https://api.openai.com/v1/audio/transcriptions",
                headers={"Authorization": f"Bearer {OPENAI_API_KEY}"},
                files={"file": f},
                data={"model": "whisper-1"}
            )
        result = response.json()
        return result.get("text", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
    except Exception as e:
        send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        raise

