import os
BOT_TOKEN = os.environ.get('BOT_TOKEN')
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

import uuid
import requests
import subprocess
import ffmpeg  # –¥–æ–±–∞–≤–ª–µ–Ω
from handlers.utils import send_message, download_telegram_file, send_video
from handlers.handlers_rewrite import handle_rewrite_transcript as handle_rewrite_text
from handlers.handlers_gpt_keywords import extract_keywords_from_text
from handlers.handlers_pexels import get_pexels_clips
from handlers.handlers_capcut_api import create_reels_from_template
from handlers.handlers_subtitles import generate_subtitles
from handlers.handlers_publish import publish_reels
from handlers.state import user_states
from handlers.vad_utils import remove_silence
from handlers.video_merge import merge_videos  # üëà –≤—Å—Ç–∞–≤—å —ç—Ç–æ


UPLOAD_DIR = "uploads"
OUTPUT_DIR = "stories"
os.makedirs(UPLOAD_DIR, exist_ok=True)
os.makedirs(OUTPUT_DIR, exist_ok=True)

def handle_stories_pipeline(chat_id, file_id):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if user_states.get(chat_id, {}).get("processing"):
        send_message(chat_id, "‚è≥ –í–∏–¥–µ–æ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
        
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    user_states[chat_id] = {"processing": True}
    
    mov_path = None
    mp4_path = None
    voice_only_path = None
    processed_path = None
    vertical_path = None
    
    try:
        uid = str(uuid.uuid4())

        send_message(chat_id, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
        mov_path = os.path.join(UPLOAD_DIR, f"{uid}.mov")
        download_telegram_file(file_id, mov_path)

        send_message(chat_id, "üé• –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ .mp4...")
        mp4_path = os.path.join(UPLOAD_DIR, f"{uid}.mp4")
        subprocess.run([
            "ffmpeg", "-y", "-i", mov_path,
            "-vcodec", "libx264", "-acodec", "aac",
            mp4_path
        ], check=True)

        # üîΩ –í—Å—Ç–∞–≤–∏—Ç—å –≤–æ—Ç —ç—Ç–æ:
        video_paths = [mp4_path] if isinstance(mp4_path, str) else mp4_path

        send_message(chat_id, "üß© –û–±—ä–µ–¥–∏–Ω—è—é –≤–∏–¥–µ–æ...")
        
        merged_temp_path = os.path.join(OUTPUT_DIR, f"{file_id}_merged_raw.mp4")
        merged_path = os.path.join(OUTPUT_DIR, f"{file_id}_merged.mp4")
        
        merged_ok = merge_videos(chat_id, video_paths, merged_temp_path)
        
        if not merged_ok or not os.path.exists(merged_temp_path):
            send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: merge_videos –Ω–µ —Å–æ–∑–¥–∞–ª –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª.")
            user_states[chat_id] = {}
            return
        
        send_message(chat_id, "üßπ –£–¥–∞–ª—è—é —Ç–∏—à–∏–Ω—É –ø–æ—Å–ª–µ —Å–∫–ª–µ–π–∫–∏...")
        cleaned_path = remove_silence(chat_id, merged_temp_path, merged_path)
        
        if not cleaned_path or not os.path.exists(cleaned_path):
            send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏—à–∏–Ω—ã –ø–æ—Å–ª–µ —Å–∫–ª–µ–π–∫–∏.")
            user_states[chat_id] = {}
            return

        
        send_message(chat_id, "‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", buttons=[
            ["1Ô∏è‚É£ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "2Ô∏è‚É£ –°—É–±—Ç–∏—Ç—Ä—ã", "3Ô∏è‚É£ –í—Å—Ç–∞–≤–∫–∏"],
            ["4Ô∏è‚É£ –í—Å—ë —Å—Ä–∞–∑—É"]
        ])
        send_video(chat_id, cleaned_path)


        
        send_message(chat_id, "‚úÖ –í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–∫–ª–µ–µ–Ω–æ. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", buttons=[
            ["üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "üé¨ –ù–∞–ª–æ–∂–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã"]
        ])
        send_video(chat_id, merged_path)
        
        user_states[chat_id] = {}


        send_message(chat_id, "üîà –û—á–∏—â–∞—é –∑–≤—É–∫ –æ—Ç —à—É–º–∞ –∏ –¥—ã—Ö–∞–Ω–∏—è...")
        denoised_path = os.path.join(UPLOAD_DIR, f"{uid}_denoised.mp4")
        subprocess.run([
            "ffmpeg", "-y", "-i", mp4_path,
            "-af", "highpass=f=150, lowpass=f=3000, afftdn=nf=-25",  # —Ñ–∏–ª—å—Ç—Ä—ã —à—É–º–æ–≤ –∏ —á–∞—Å—Ç–æ—Ç
            "-c:v", "copy",
            denoised_path
        ], check=True)

        print(f"[DEBUG] denoised_path –¥–æ remove_silence: {denoised_path}")

        send_message(chat_id, "üîá –£–¥–∞–ª—è—é —Ç–∏—à–∏–Ω—É –∏ —É—Å–∫–æ—Ä—è—é...")
        voice_only_path = os.path.join(UPLOAD_DIR, f"{uid}_voice.mp4")
        voice_only_path = remove_silence(chat_id, denoised_path, voice_only_path)
        print(f"[DEBUG] voice_only_path –∏–∑ remove_silence: {voice_only_path}")

        if voice_only_path is None:
            send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏—à–∏–Ω—ã.")
            return

        processed_path = voice_only_path  # <=== –í–û–¢ –≠–¢–ê –°–¢–†–û–ö–ê

        send_message(chat_id, "üì± –†–µ—Å–∞–π–∑ –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç 9:16...")
        vertical_path = os.path.join(OUTPUT_DIR, f"{uid}_vertical.mp4")
        subprocess.run([
            "ffmpeg", "-y", "-i", processed_path,
            "-vf", "scale='if(gt(a,9/16),720,-2)':'if(gt(a,9/16),-2,1280)',pad=720:1280:(ow-iw)/2:(oh-ih)/2",
            "-c:a", "copy", vertical_path
        ], check=True)

        # –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ
        probe = ffmpeg.probe(vertical_path)
        duration = float(probe['format']['duration'])

        if duration < 40:
            send_message(chat_id, "üéØ –í–∏–¥–µ–æ –∫–æ—Ä–æ—á–µ 40 —Å–µ–∫ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å.")
            first_part = vertical_path  # –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –±–µ–∑ –Ω–∞—Ä–µ–∑–∫–∏
        else:
            send_message(chat_id, "‚úÇÔ∏è –ù–∞—Ä–µ–∑–∞—é –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 40 —Å–µ–∫...")
            segment_output = os.path.join(OUTPUT_DIR, f"{uid}_part_%03d.mp4")
            subprocess.run([
                "ffmpeg", "-y", "-i", vertical_path,
                "-c", "copy", "-map", "0",
                "-segment_time", "40", "-f", "segment",
                segment_output
            ], check=True)
            first_part = segment_output.replace("%03d", "000")

        send_message(chat_id, "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ...")

        if os.path.exists(first_part):
            file_size_mb = os.path.getsize(first_part) / (1024 * 1024)
            print(f"üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} MB")

            with open(first_part, "rb") as f:
                try:
                    if file_size_mb < 49:
                        response = requests.post(
                            f"https://api.telegram.org/bot{os.environ['BOT_TOKEN']}/sendVideo",
                            data={"chat_id": chat_id},
                            files={"video": f}
                        )
                    else:
                        print("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç")
                        response = requests.post(
                            f"https://api.telegram.org/bot{os.environ['BOT_TOKEN']}/sendDocument",
                            data={"chat_id": chat_id},
                            files={"document": f}
                        )
            
                    result = response.json()
                    print("‚úÖ –û—Ç–≤–µ—Ç Telegram:", result)
            
                    if response.status_code == 200 and result.get("ok"):
                        from handlers.handlers_rewrite import send_video_action_buttons
                        send_video_action_buttons(chat_id)
                        
                    else:
                        send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram: {result.get('description') or '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")
            
                except Exception as e:
                    print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", e)
                    send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")


        else:
            send_message(chat_id, "‚ö†Ô∏è –í–∏–¥–µ–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º.")

    except Exception as e:
        send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    finally:
        for f in [mov_path, mp4_path, voice_only_path, processed_path, vertical_path]:
            if f and os.path.exists(f):  # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
                os.remove(f)
    
        if chat_id in user_states:
            del user_states[chat_id]



def process_capcut_pipeline(chat_id, input_data):
    try:
        send_message(chat_id, "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...")
        video_path = download_telegram_file(input_data, f"/tmp/{uuid.uuid4()}.mp4")

        send_message(chat_id, "üß† –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –≤–∏–¥–µ–æ...")
        transcript = transcribe_video(video_path, chat_id)

        send_message(chat_id, "‚úçÔ∏è –î–µ–ª–∞—é —Ä–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç–∞...")
        rewritten_text = handle_rewrite_text(chat_id, transcript)

        send_message(chat_id, "üóù –ò–∑–≤–ª–µ–∫–∞—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...")
        keywords = extract_keywords_from_text(rewritten_text)

        send_message(chat_id, "üéû –ò—â—É –≤–∏–¥–µ–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º...")
        pexels_clips = get_pexels_clips(keywords)

        send_message(chat_id, "üé¨ –°–æ–±–∏—Ä–∞—é –≤–∏–¥–µ–æ –≤ CapCut —à–∞–±–ª–æ–Ω–µ...")
        final_video_url = create_reels_from_template(chat_id, pexels_clips, rewritten_text)

        send_message(chat_id, "üî§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—É–±—Ç–∏—Ç—Ä—ã...")
        generate_subtitles(chat_id, rewritten_text, final_video_url)

        send_message(chat_id, "üì§ –ü—É–±–ª–∏–∫—É—é Reels...")
        publish_reels(chat_id, final_video_url)

    except Exception as e:
        send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Reels: {e}")



import requests
from moviepy.editor import concatenate_videoclips, VideoFileClip
from handlers.handlers_rewrite import send_video_action_buttons

def process_stories_multiple(chat_id, video_ids):
    local_paths = []
    for i, file_id in enumerate(video_ids):
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
        file_info = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getFile?file_id={file_id}").json()
        file_path = file_info["result"]["file_path"]
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        local_file = f"uploads/video_{chat_id}_{i}.mp4"
        with open(local_file, "wb") as f:
            f.write(requests.get(file_url).content)
        local_paths.append(local_file)

    # –°–∫–ª–µ–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ —Å–∫–ª–µ–π–∫–æ–π
        if not local_paths:
            send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–ª–µ–π–∫–∏.")
            return
        
        for path in local_paths:
            if not os.path.exists(path):
                send_message(chat_id, f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
                return
        
        try:
            clips = [VideoFileClip(p, audio=True) for p in local_paths]
        except Exception as e:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            return


        final_clip = concatenate_videoclips(clips)
        output_path = f"stories/final_{chat_id}.mp4"
        
        if not os.path.exists(output_path):
            send_message(chat_id, f"‚ùå –ò—Ç–æ–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
            return

        try:
            final_clip.write_videofile(output_path, codec="libx264", audio_codec="aac")
        except Exception as e:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
            return



        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(output_path, "rb") as video:
            requests.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendVideo",
                data={"chat_id": chat_id},
                files={"video": video}
            )
    
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for path in local_paths:
            os.remove(path)
        if os.path.exists(output_path):
            os.remove(output_path)

        # –ö–Ω–æ–ø–∫–∏
        send_video_action_buttons(chat_id)

    except Exception as e:
        requests.post(TELEGRAM_API_URL, json={
            'chat_id': chat_id,
            'text': f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–ª–µ–π–∫–∏: {e}"
        })

