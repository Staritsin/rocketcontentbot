import requests
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

BOT_TOKEN = os.environ.get('BOT_TOKEN')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

TELEGRAM_API_URL = f'https://api.telegram.org/bot{BOT_TOKEN}'
TELEGRAM_FILE_API = f'https://api.telegram.org/file/bot{BOT_TOKEN}'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from handlers.state import user_states

def handle_voice(chat_id):
    text = (
        "üéôÔ∏è –†–∞–±–æ—Ç–∞ —Å –≥–æ–ª–æ—Å–æ–º\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –ø—Ä–µ–≤—Ä–∞—â—É –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ Whisper.\n"
        "–ó–∞—Ç–µ–º —Ç—ã —Å–º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Ä–µ—Ä–∞–π—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–ª–∏ –≤–∏–¥–µ–æ."
    )
    requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
        'chat_id': chat_id,
        'text': text
    })

def handle_voice_transcription(chat_id, file_id):
    try:
        print("üìÖ –ü–æ–ª—É—á–µ–Ω file_id:", file_id)

        file_info = requests.get(f"{TELEGRAM_API_URL}/getFile?file_id={file_id}").json()
        file_path = file_info['result']['file_path']

        file_url = f"{TELEGRAM_FILE_API}/{file_path}"
        print("üîó –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ:", file_url)

        audio_content = requests.get(file_url).content
        local_filename = "voice.ogg"
        with open(local_filename, "wb") as f:
            f.write(audio_content)

        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Whisper...")
        with open(local_filename, "rb") as f:
            response = requests.post(
                "https://api.openai.com/v1/audio/transcriptions",
                headers={"Authorization": f"Bearer {OPENAI_API_KEY}"},
                files={"file": f},
                data={"model": "whisper-1"}
            )

        result = response.json()
        print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Whisper:", result)

        text = result.get("text", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[chat_id] = {'last_transcript': text}

        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n{text}"
        })

        # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        keyboard = [
            [InlineKeyboardButton("‚úçÔ∏è –°–¥–µ–ª–∞—Ç—å —Ä–µ—Ä–∞–π—Ç", callback_data='rewrite_transcript')],
            [InlineKeyboardButton("üì§ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –ø–æ—Å—Ç", callback_data='select_post_platform')],
            [InlineKeyboardButton("üé¨ –°–¥–µ–ª–∞—Ç—å Reels", callback_data='make_reels')],
            [InlineKeyboardButton("üåü –í—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å", callback_data='success')],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
        ]

        reply_markup = {'inline_keyboard': [[btn.to_dict() for btn in row] for row in keyboard]}

        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ? üëá",
            'reply_markup': reply_markup
        })

        from handlers.telegram_webhook_fix import ask_for_rating
        ask_for_rating(chat_id)

    except Exception as e:
        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}"
        })

def handle_rewrite_transcript(chat_id):
    try:
        last_text = user_states.get(chat_id, {}).get('last_transcript')
        if not last_text:
            raise ValueError("–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞")

        prompt = f"–°–¥–µ–ª–∞–π —Ä–µ—Ä–∞–π—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å–º—ã—Å–ª –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:\n\n{last_text}"
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENAI_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "gpt-3.5-turbo",
                "messages": [
                    {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä."},
                    {"role": "user", "content": prompt}
                ]
            }
        )
        result = response.json()
        rewritten = result['choices'][0]['message']['content']

        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': f"‚úçÔ∏è –†–µ—Ä–∞–π—Ç:\n{rewritten}"
        })

    except Exception as e:
        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞: {e}"
        })
