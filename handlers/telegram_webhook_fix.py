import requests
import os
import math
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

BOT_TOKEN = os.environ.get('BOT_TOKEN')
TELEGRAM_API_URL = f'https://api.telegram.org/bot{BOT_TOKEN}'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

def handle_post_platform_selection(chat_id):
    text = "–í—ã–±–µ—Ä–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç üëá"
    keyboard = [
        [InlineKeyboardButton("üì∏ Instagram", callback_data='post_instagram')],
        [InlineKeyboardButton("üó£ Telegram", callback_data='post_telegram')],
        [InlineKeyboardButton("üì¨ –°–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∞", callback_data='post_spam')],
        [InlineKeyboardButton("üì¢ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", callback_data='post_vk')],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard).to_dict()

    requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
        'chat_id': chat_id,
        'text': text,
        'reply_markup': reply_markup
    })

def generate_platform_post(chat_id, platform):
    last_text = user_states.get(chat_id, {}).get('last_transcript')
    if not last_text:
        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': "‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é."
        })
        return

    if platform == 'instagram':
        text = f"üì∏ Instagram –ø–æ—Å—Ç:\n\n{last_text}\n\nüëâ –ù–∞–ø–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç—ã, —á—Ç–æ –¥—É–º–∞–µ—à—å!"

    elif platform == 'telegram':
        text = f"üó£ Telegram –ø–æ—Å—Ç:\n\n{last_text}"

    elif platform == 'spam':
        preview = last_text[:300].strip()
        text = (
            f"üì¨ –°–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∞:\n\n"
            f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {preview[:50]}...\n"
            f"**–¢–µ–∫—Å—Ç:** {preview}\n"
            f"[üìå –ü–æ–¥—Ä–æ–±–Ω–µ–µ](https://your-link.com)"
        )

    elif platform == 'vk':
        text = f"üì¢ –ü–æ—Å—Ç –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:\n\n{last_text}\n\n#–∫–æ–Ω—Ç–µ–Ω—Ç #–±–æ—Ç #–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"

    else:
        text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"

    requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
        'chat_id': chat_id,
        'text': text
    })

def handle_rewrite_transcript(chat_id):
    import json

    last_text = user_states.get(chat_id, {}).get('last_transcript')
    if not last_text:
        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': "‚ùå –¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é."
        })
        return

    prompt = f"–°–¥–µ–ª–∞–π —Ä–µ—Ä–∞–π—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å–º—ã—Å–ª –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:\n\n{last_text}"
    try:
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {os.environ.get('OPENAI_API_KEY')}",
                "Content-Type": "application/json"
            },
            json={
                "model": "gpt-3.5-turbo",
                "messages": [
                    {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä."},
                    {"role": "user", "content": prompt}
                ]
            }
        )
        result = response.json()
        rewritten = result['choices'][0]['message']['content']

        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': f"‚úçÔ∏è –†–µ—Ä–∞–π—Ç:\n{rewritten}"
        })

    except Exception as e:
        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞: {e}"
        })

def handle_voice_transcription(chat_id, file_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
        file_info = requests.get(f"{TELEGRAM_API_URL}/getFile?file_id={file_id}").json()
        file_path = file_info['result']['file_path']
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        local_path = "voice.ogg"
        audio_data = requests.get(file_url).content
        with open(local_path, "wb") as f:
            f.write(audio_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Whisper
        with open(local_path, "rb") as f:
            response = requests.post(
                "https://api.openai.com/v1/audio/transcriptions",
                headers={"Authorization": f"Bearer {os.environ.get('OPENAI_API_KEY')}"},
                files={"file": f},
                data={"model": "whisper-1"}
            )
        result = response.json()
        text = result.get("text", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")

        user_states[chat_id] = {'last_transcript': text}

        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n{text}"
        })

    except Exception as e:
        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}"
        })
