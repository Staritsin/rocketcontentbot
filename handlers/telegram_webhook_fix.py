import requests
import os
import math
import shutil
from tempfile import mkdtemp
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from flask import send_file

BOT_TOKEN = os.environ.get('BOT_TOKEN')
TELEGRAM_API_URL = f'https://api.telegram.org/bot{BOT_TOKEN}'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

# === –õ–û–ì-–§–£–ù–ö–¶–ò–Ø ===
def log_transcription_progress(chat_id, message):
    os.makedirs("logs", exist_ok=True)
    with open("logs/transcribe.log", "a", encoding="utf-8") as log_file:
        log_file.write(f"[chat_id: {chat_id}] {message}\n")

def handle_post_platform_selection(chat_id):
    text = "–í—ã–±–µ—Ä–∏, –∫—É–¥–∞ —Ö–æ—á–µ—à—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç üëá"
    keyboard = [
        [InlineKeyboardButton("üì∏ Instagram", callback_data='post_instagram')],
        [InlineKeyboardButton("üó£ Telegram", callback_data='post_telegram')],
        [InlineKeyboardButton("üì¨ –°–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∞", callback_data='post_spam')],
        [InlineKeyboardButton("üì¢ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", callback_data='post_vk')],
        [InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data='download_transcript')],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard).to_dict()

    requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
        'chat_id': chat_id,
        'text': text,
        'reply_markup': reply_markup
    })

def generate_platform_post(chat_id, platform):
    last_text = user_states.get(chat_id, {}).get('last_transcript')
    if not last_text:
        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': "‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é."
        })
        return

    if platform == 'instagram':
        text = f"üì∏ Instagram –ø–æ—Å—Ç:\n\n{last_text}\n\nüëâ –ù–∞–ø–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç—ã, —á—Ç–æ –¥—É–º–∞–µ—à—å!"

    elif platform == 'telegram':
        text = f"üó£ Telegram –ø–æ—Å—Ç:\n\n{last_text}"

    elif platform == 'spam':
        preview = last_text[:300].strip()
        text = (
            f"üì¨ –°–ø–∞–º-—Ä–∞—Å—Å—ã–ª–∫–∞:\n\n"
            f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {preview[:50]}...\n"
            f"**–¢–µ–∫—Å—Ç:** {preview}\n"
            f"[üìå –ü–æ–¥—Ä–æ–±–Ω–µ–µ](https://your-link.com)"
        )

    elif platform == 'vk':
        text = f"üì¢ –ü–æ—Å—Ç –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:\n\n{last_text}\n\n#–∫–æ–Ω—Ç–µ–Ω—Ç #–±–æ—Ç #–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"

    else:
        text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"

    requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
        'chat_id': chat_id,
        'text': text
    })

def handle_rewrite_transcript(chat_id):
    import json

    last_text = user_states.get(chat_id, {}).get('last_transcript')
    if not last_text:
        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': "‚ùå –¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é."
        })
        return

    prompt = f"–°–¥–µ–ª–∞–π —Ä–µ—Ä–∞–π—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å–º—ã—Å–ª –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:\n\n{last_text}"
    try:
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {os.environ.get('OPENAI_API_KEY')}",
                "Content-Type": "application/json"
            },
            json={
                "model": "gpt-3.5-turbo",
                "messages": [
                    {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä."},
                    {"role": "user", "content": prompt}
                ]
            }
        )
        result = response.json()
        rewritten = result['choices'][0]['message']['content']

        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': f"‚úçÔ∏è –†–µ—Ä–∞–π—Ç:\n{rewritten}"
        })

    except Exception as e:
        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞: {e}"
        })

def handle_voice_transcription(chat_id, file_path):
    
# –ü—Ä–æ–≤–µ—Ä–∫–∞: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ ffprobe
ffprobe_check = os.popen("which ffprobe").read().strip()
if not ffprobe_check:
    raise EnvironmentError("ffprobe –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤ Render —á–µ—Ä–µ–∑ 'apt install ffmpeg'")

    
    try:
        temp_dir = mkdtemp()
        input_path = os.path.join(temp_dir, "input.ogg")
        file_response = requests.get(f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}")
        with open(input_path, "wb") as f:
            f.write(file_response.content)

        log_transcription_progress(chat_id, f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {input_path}")

        probe_cmd = f"ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 {input_path}"
        duration_str = os.popen(probe_cmd).read().strip()

        if not duration_str:
            raise ValueError("ffprobe –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É ffmpeg")

        duration = float(duration_str)

        chunk_duration = 60
        total_chunks = math.ceil(duration / chunk_duration)

        log_transcription_progress(chat_id, f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫. –ë—É–¥–µ—Ç {total_chunks} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")

        full_text = []

        for i in range(total_chunks):
            chunk_path = os.path.join(temp_dir, f"chunk_{i}.mp3")
            start_time = i * chunk_duration
            cmd = f"ffmpeg -i {input_path} -ss {start_time} -t {chunk_duration} -ar 44100 -ac 1 -vn -y {chunk_path}"
            os.system(cmd)

            with open(chunk_path, "rb") as f:
                response = requests.post(
                    "https://api.openai.com/v1/audio/transcriptions",
                    headers={"Authorization": f"Bearer {os.environ.get('OPENAI_API_KEY')}"},
                    files={"file": f},
                    data={"model": "whisper-1"}
                )
                result = response.json()
                full_text.append(result.get("text", ""))

            log_transcription_progress(chat_id, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç {i + 1}/{total_chunks}")

            requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
                'chat_id': chat_id,
                'text': f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{total_chunks} –º–∏–Ω—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ..."
            })

        final_text = " ".join(full_text).strip()
        user_states[chat_id] = {'last_transcript': final_text}

        os.makedirs("transcripts", exist_ok=True)
        result_path = f"transcripts/result_{chat_id}.txt"
        with open(result_path, "w", encoding="utf-8") as out:
            out.write(final_text)

        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n{final_text}"
        })

        keyboard = [[InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data='download_transcript')]]
        reply_markup = InlineKeyboardMarkup(keyboard).to_dict()
        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': "–ß—Ç–æ –¥–∞–ª—å—à–µ? üëá",
            'reply_markup': reply_markup
        })

        shutil.rmtree(temp_dir)

    except Exception as e:
        log_transcription_progress(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}"
        })

def send_transcript_file(chat_id):
    result_path = f"transcripts/result_{chat_id}.txt"
    if os.path.exists(result_path):
        requests.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument",
            files={"document": open(result_path, "rb")},
            data={"chat_id": chat_id}
        )
    else:
        requests.post(f'{TELEGRAM_API_URL}/sendMessage', json={
            'chat_id': chat_id,
            'text': "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é."
        })
