import subprocess
import os
import ffmpeg
from handlers.utils import send_message

import torchaudio
import torch
model, utils = torch.hub.load(
    repo_or_dir='snakers4/silero-vad',
    model='silero_vad',
    force_reload=True  # –ü–æ—Å—Ç–∞–≤—å False –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞
)
(get_speech_timestamps, save_audio, read_audio, VADIterator, collect_chunks) = utils



import librosa



def remove_silence(chat_id, input_path, output_path):
    try:
        normalized_path = input_path  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
        
        # –≠—Ç–∞–ø 1: –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        send_message(chat_id, f"[1] üõ†Ô∏è –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {os.path.basename(input_path)}")
        print(f"[1] –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {input_path} ‚Üí –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {output_path}")

        # –≠—Ç–∞–ø 2: –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É

        # üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –¥–æ—Ä–æ–∂–µ–∫
       
        
        try:
            probe = ffmpeg.probe(input_path)
            video_streams = [stream for stream in probe['streams'] if stream['codec_type'] == 'video']
            audio_streams = [stream for stream in probe['streams'] if stream['codec_type'] == 'audio']
            if not video_streams:
                send_message(chat_id, "‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return
            if not audio_streams:
                send_message(chat_id, "‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –∑–≤—É–∫–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
                return
                
            # üéûÔ∏è –®–∞–≥ –¥–æ–ø. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (mov/webm/mkv)
            if input_path.endswith((".mov", ".webm", ".mkv")):
                send_message(chat_id, "üß∞ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ –≤ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–¥ –≤—ã—Ä–µ–∑–∫–æ–π —Ç–∏—à–∏–Ω—ã...")
        
                normalized_path = input_path.replace(".mov", "_normalized.mp4").replace(".webm", "_normalized.mp4").replace(".mkv", "_normalized.mp4")
        
                convert_cmd = [
                    "ffmpeg", "-y", "-i", input_path,
                    "-vf", "fps=30,scale=720:1280",
                    "-c:v", "libx264", "-preset", "ultrafast", "-crf", "23",
                    "-c:a", "aac", "-b:a", "128k",
                    normalized_path
                ]
                
                result = subprocess.run(convert_cmd, capture_output=True, text=True)
                print(f"[ü™µ] FFmpeg –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è stdout:\n{result.stdout}")
                print(f"[ü™µ] FFmpeg –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è stderr:\n{result.stderr}")
        
                if result.returncode != 0 or not os.path.exists(normalized_path):
                    send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ü—Ä–µ—Ä—ã–≤–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É.")
                    return
                
                input_path = normalized_path  # –∑–∞–º–µ–Ω—è–µ–º –ø—É—Ç—å –Ω–∞ –Ω–æ–≤—ã–π

            
        # üëá –ö–æ–º–∞–Ω–¥–∞
        
            command = [
                "auto-editor",
                input_path,  # —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                "--edit", "audio:threshold=2%",
                "--frame_margin", "2",
                "--video_speed", "1",
                "--export", "default",
                "--output-file", output_path,
                "--video_codec", "libx264",
                "--audio_codec", "aac",
                "--no-open"
            ]
            
            # üîç DEBUG –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            print(f"[DEBUG] Auto-editor input: {input_path}")
            print(f"[DEBUG] Auto-editor output: {output_path}")
            print(f"[DEBUG] Auto-editor CMD: {' '.join(command)}")
            
            print(f"[2] –ö–æ–º–∞–Ω–¥–∞ auto-editor:\n{' '.join(command)}")
        
        except Exception as e:
            send_message(chat_id, f"‚ö†Ô∏è ffprobe –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É: {str(e)}")
            return


        # –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫–∞–µ–º auto-editor
        send_message(chat_id, "[2] üîá –ó–∞–ø—É—Å–∫–∞—é auto-editor...")
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        
        # üí° –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if not os.path.exists(output_path) or os.path.getsize(output_path) < 1000:
            send_message(chat_id, "‚ùå –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å output_path.")
            print(f"[–û–®–ò–ë–ö–ê] –ü—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π —Ñ–∞–π–ª: {output_path}")
            return
        
        # üñ®Ô∏è –õ–æ–≥–∏ stdout/stderr –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"[3] Auto-editor stdout:\n{result.stdout}")
        print(f"[3] Auto-editor stderr:\n{result.stderr}")
                

        # ‚¨áÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–µ–∫–∞ —á–µ—Ä–µ–∑ ffprobe (–¥–æ–±–∞–≤—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ auto-editor)
        probe = subprocess.run([
            "ffprobe", "-v", "error",
            "-select_streams", "v:0",
            "-show_entries", "stream=codec_name,width,height",
            "-of", "default=noprint_wrappers=1:nokey=1",
            output_path
        ], capture_output=True, text=True)
        
        print(f"[4] ffprobe:\n{probe.stdout}")

        if not probe.stdout.strip():
            send_message(chat_id, "‚ö†Ô∏è ffprobe –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö. –í–∏–¥–µ–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ.")
            print(f"[–û–®–ò–ë–ö–ê] ffprobe –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ —Ñ–∞–π–ª—É: {output_path}")
                

        print(f"[3] Auto-editor stdout:\n{result.stdout}")
        print(f"[3] Auto-editor stderr:\n{result.stderr}")

        # –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not os.path.exists(output_path):
            send_message(chat_id, f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –Ω–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {output_path}")
            print(f"[–û–®–ò–ë–ö–ê] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {output_path}")
            return None

        # –≠—Ç–∞–ø 5: –£—Å–ø–µ—Ö
        send_message(chat_id, "‚úÖ –¢–∏—à–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∞. –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ.")
        print(f"[4] ‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
        return output_path

    except subprocess.CalledProcessError as e:
        send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ auto-editor: {e}")
        print(f"[–û–®–ò–ë–ö–ê] subprocess error: {e}")
        print(f"stdout: {e.stdout}")
        print(f"stderr: {e.stderr}")
        return None

    except Exception as e:
        send_message(chat_id, f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"[–û–®–ò–ë–ö–ê] remove_silence(): {str(e)}")
        return None

def remove_silence_vad(chat_id, input_path, output_path):
    try:
        send_message(chat_id, "üß† –ó–∞–ø—É—Å–∫–∞—é —Ç–æ—á–Ω—É—é –≤—ã—Ä–µ–∑–∫—É –ø–æ –≥–æ–ª–æ—Å—É (Silero VAD)...")
        print(f"[VAD] –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑: {input_path}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV —Å 16kHz)
        wav_path = input_path.replace(".mp4", "_audio.wav")
        subprocess.run([
            "ffmpeg", "-y", "-i", input_path, "-ar", "16000", "-ac", "1", "-f", "wav", wav_path
        ], capture_output=True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º WAV
        audio, sr = librosa.load(wav_path, sr=16000)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–π–º–∫–æ–¥—ã —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Silero VAD
        speech_timestamps = get_speech_timestamps(audio, model, sampling_rate=16000)


        if not speech_timestamps:
            send_message(chat_id, "‚ö†Ô∏è –ì–æ–ª–æ—Å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –í–∏–¥–µ–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
            return None

        # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–∫–æ–¥–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        segments = []
        for ts in speech_timestamps:
            start = ts['start'] / sr
            end = ts['end'] / sr
            segments.append(f"between(t,{start:.2f},{end:.2f})")

        vf_expr = "+".join(segments)

        # –í—ã—Ä–µ–∑–∞–µ–º –ø–æ –≥–æ–ª–æ—Å—É
        subprocess.run([
            "ffmpeg", "-y", "-i", input_path,
            "-vf", f"select='{vf_expr}',setpts=N/FRAME_RATE/TB",
            "-af", f"aselect='{vf_expr}',asetpts=N/SR/TB",
            "-c:v", "libx264", "-c:a", "aac",
            output_path
        ], capture_output=True)

        if not os.path.exists(output_path):
            send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ VAD-–æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return None

        send_message(chat_id, "‚úÖ –í—ã—Ä–µ–∑–∫–∞ –ø–æ –≥–æ–ª–æ—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ.")
        return output_path

    except Exception as e:
        send_message(chat_id, f"‚ùå VAD –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"[VAD-ERROR]: {e}")
        return None

