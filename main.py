from flask import Flask, request, jsonify
import requests
import os
from telegram import InlineKeyboardButton
from handlers.handlers_video import handle_video
from handlers.handlers_reels import handle_transcribe
from handlers.handlers_rewrite import handle_rewrite
from handlers.handlers_capcut import handle_capcut
from handlers.handlers_subtitles import handle_subtitles
from handlers.handlers_thumbnail import handle_thumbnail
from handlers.handlers_publish import handle_publish
from handlers.handlers_voice import handle_voice
from handlers.handlers_text import handle_text
from handlers.handlers_image import handle_image
from handlers.handlers_plan import handle_plan
from handlers.handlers_pay import handle_pay
from handlers.handlers_support import handle_support
from handlers.utils import TELEGRAM_API_URL
from handlers.handlers_transcribe import handle_transcribe_mode, handle_transcribe_input
from handlers.handlers_voice import handle_voice_transcription
from handlers.telegram_webhook_fix import (
    handle_post_platform_selection,
    generate_platform_post,
    handle_rewrite_transcript,
    send_transcript_file,
    handle_callback_rating
)


app = Flask(__name__)
BOT_TOKEN = os.environ.get('BOT_TOKEN')
TELEGRAM_API_URL = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
user_states = {}

@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    data = request.get_json()
    print("üî• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram:", data)

    # === CALLBACK QUERY ===
    if 'callback_query' in data:
        callback = data['callback_query']
        chat_id = callback['message']['chat']['id']
        query_data = callback['data']
        callback_id = callback['id']
        
        # –û—Ç–≤–µ—Ç Telegram
        requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery", json={
            'callback_query_id': callback_id
        })
        
        # === –¥–æ–±–∞–≤—å —Å—é–¥–∞
        if handle_callback_rating(query_data, chat_id):
            return jsonify(success=True)

        if query_data == 'video':
            handle_video(chat_id)
        elif query_data == 'voice':
            handle_voice(chat_id)
        elif query_data == 'text':
            handle_text(chat_id)
        elif query_data == 'image':
            handle_image(chat_id)
        elif query_data == 'plan':
            handle_plan(chat_id)
        elif query_data == 'pay':
            handle_pay(chat_id)
        elif query_data == 'support':
            handle_support(chat_id)
        elif query_data == 'smart_reels':
            send_message(chat_id, "üì≤ –£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Reels\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É. –Ø —Å–¥–µ–ª–∞—é: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é, —Ä–µ—Ä–∞–π—Ç, —Å—É–±—Ç–∏—Ç—Ä—ã, –≤–∏–¥–µ–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞, –æ–±–ª–æ–∂–∫—É –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
            keyboard = [
                [InlineKeyboardButton("üî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", callback_data='transcribe'),
                 InlineKeyboardButton("‚úçÔ∏è –†–µ—Ä–∞–π—Ç", callback_data='rewrite')],
                [InlineKeyboardButton("üß© –í–∏–¥–µ–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞ CapCut", callback_data='capcut'),
                 InlineKeyboardButton("üéû –°—É–±—Ç–∏—Ç—Ä—ã", callback_data='subtitles')],
                [InlineKeyboardButton("üñº –û–±–ª–æ–∂–∫–∞", callback_data='thumbnail'),
                 InlineKeyboardButton("üì§ –ü–æ—Å—Ç–∏–Ω–≥", callback_data='publish')]
            ]
            reply_markup = {'inline_keyboard': [[btn.to_dict() for btn in row] for row in keyboard]}
            requests.post(TELEGRAM_API_URL, json={
                'chat_id': chat_id,
                'text': '–í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –≤–∏–¥–µ–æ üëá',
                'reply_markup': reply_markup
            })
        elif query_data == 'transcribe':
            user_states[chat_id] = 'transcribe'
            send_message(chat_id, "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.")
        
        elif query_data == 'rewrite':
            handle_rewrite(chat_id)
        
        elif query_data == 'capcut':
            handle_capcut(chat_id)
        
        elif query_data == 'subtitles':
            handle_subtitles(chat_id)
        
        elif query_data == 'thumbnail':
            handle_thumbnail(chat_id)
        
        elif query_data == 'publish':
            handle_publish(chat_id)
        
        elif query_data == 'use_as_post':
            handle_post_platform_selection(chat_id)
        
        elif query_data == 'post_instagram':
            generate_platform_post(chat_id, 'instagram')
        
        elif query_data == 'post_telegram':
            generate_platform_post(chat_id, 'telegram')
        
        elif query_data == 'post_spam':
            generate_platform_post(chat_id, 'spam')
        
        elif query_data == 'post_vk':
            generate_platform_post(chat_id, 'vk')
        
        elif query_data == 'rewrite_transcript':
            send_message(chat_id, "‚úçÔ∏è –û–∫–µ–π, –∑–∞–ø—É—Å–∫–∞—é —Ä–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç–∞!")
            handle_rewrite_transcript(chat_id)

        
        elif query_data == 'make_reels':
            send_message(chat_id, "üé¨ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É Reels.")
        
        elif query_data == 'success':
            send_message(chat_id, "üåü –†–∞–¥, —á—Ç–æ –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å!")
        
        elif query_data == 'menu':
            send_message(chat_id, "üîô –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é. –ù–∞–ø–∏—à–∏ /menu")

        elif query_data == 'download_transcript':
            send_transcript_file(chat_id)

        return jsonify(success=True)

    # === MESSAGE ===
    if 'message' in data:
        message = data['message']
        chat_id = message['chat']['id']

        if 'voice' in message or 'audio' in message:
            file_id = message['voice']['file_id'] if 'voice' in message else message['audio']['file_id']
            handle_voice_transcription(chat_id, file_id)
            return jsonify(success=True)

        if 'video' in message or 'document' in message:
            if user_states.get(chat_id) == 'transcribe':
                handle_transcribe_input(chat_id, message)
                return jsonify(success=True)

        if 'text' in message:
            text = message['text']

            if user_states.get(chat_id) == 'transcribe':
                handle_transcribe_input(chat_id, text)
                return jsonify(success=True)

            if text.lower() == '/start':
                send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç...\n–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ /menu üòä")
            elif text.lower() == '/menu':
                keyboard = [
                    [InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ", callback_data='video'),
                     InlineKeyboardButton("üéß –ì–æ–ª–æ—Å", callback_data='voice')],
                    [InlineKeyboardButton("‚úçÔ∏è –¢–µ–∫—Å—Ç", callback_data='text'),
                     InlineKeyboardButton("üñº –ö–∞—Ä—Ç–∏–Ω–∫–∏", callback_data='image')],
                    [InlineKeyboardButton("üìÖ –ü–ª–∞–Ω", callback_data='plan'),
                     InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data='pay')],
                    [InlineKeyboardButton("üì≤ –£–º–Ω—ã–π Reels", callback_data='smart_reels')],
                    [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')]
                ]
                reply_markup = {'inline_keyboard': [[btn.to_dict() for btn in row] for row in keyboard]}
                requests.post(TELEGRAM_API_URL, json={
                    'chat_id': chat_id,
                    'text': '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? üëá',
                    'reply_markup': reply_markup
                })

            elif text.lower() == '/stats':
                from handlers.telegram_webhook_fix import handle_stats_request
                handle_stats_request(chat_id)
            elif text.lower() == '/help':
            send_message(chat_id, 
                "üìö –ß—Ç–æ —è —É–º–µ—é:\n\n"
                "/menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                "/about ‚Äî –∫—Ç–æ —è –∏ –∑–∞—á–µ–º\n\n"
                "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å –∏–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –∏ —è –≤—Å—ë –æ–±—Ä–∞–±–æ—Ç–∞—é!")
            
            elif text.lower() == '/about':
            send_message(chat_id, 
                "ü§ñ –û–±–æ –º–Ω–µ:\n"
                "–Ø ‚Äî –±–æ—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –°—Ç–∞—Ä–∏—Ü–∏–Ω–∞, —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞.\n\n"
                "–Ø –ø–æ–º–æ–≥–∞—é —Ç–µ–±–µ:\n"
                "‚Äî —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å –∏ –≤–∏–¥–µ–æ\n"
                "‚Äî –¥–µ–ª–∞—Ç—å Reels –∏–∑ —à–∞–±–ª–æ–Ω–∞\n"
                "‚Äî –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã\n"
                "‚Äî —Ä–∞–±–æ—Ç–∞—Ç—å —Å CapCut, Telegram, Instagram\n\n"
                "üåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://revolife.ru")


            else:
                send_message(chat_id, "‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!")

    return jsonify(success=True)

def send_message(chat_id, text):
    requests.post(TELEGRAM_API_URL, json={
        'chat_id': chat_id,
        'text': text
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000, threaded=True)
