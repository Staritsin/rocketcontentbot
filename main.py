from flask import Flask, request, jsonify
from flask import send_from_directory
import requests
import os

import uuid
from handlers.utils import download_telegram_file
from handlers.handlers_stories import handle_single_video_processing


from telegram import InlineKeyboardButton
from handlers.utils import send_message
from handlers.utils import TELEGRAM_API_URL
from handlers.handlers_stories import handle_stories_pipeline, process_stories_multiple
from handlers.handlers_buttons import send_story_action_buttons
from handlers.handlers_buttons import handle_story_action_callback
from handlers.handlers_buttons import handle_user_choice
from handlers.handlers_rewrite import handle_callback_query
from handlers.handlers_video import handle_video
from handlers.handlers_stories import handle_stories_pipeline
from handlers.handlers_reels import handle_transcribe
from handlers.handlers_rewrite import handle_rewrite
from handlers.handlers_runway import handle_capcut, process_capcut_pipeline
from handlers.handlers_subtitles import handle_subtitles
from handlers.handlers_thumbnail import handle_thumbnail
from handlers.handlers_publish import handle_publish
from handlers.handlers_voice import handle_voice
from handlers.handlers_text import handle_text
from handlers.handlers_image import handle_image
from handlers.handlers_plan import handle_plan
from handlers.handlers_pay import handle_pay
from handlers.handlers_support import handle_support
from handlers.handlers_transcribe import handle_transcribe_mode, handle_transcribe_input
from handlers.handlers_voice import handle_voice_transcription
from handlers.telegram_webhook_fix import (
    handle_post_platform_selection,
    generate_platform_post,
    handle_rewrite_transcript,
    send_transcript_file,
    handle_callback_rating
)

app = Flask(__name__)
BOT_TOKEN = os.environ.get('BOT_TOKEN')

user_states = {}

@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

@app.route('/webhook', methods=['POST'])

def telegram_webhook():
    data = request.get_json()
    print("\U0001F525 –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram:", data)

    if 'callback_query' in data:
        callback = data['callback_query']
        chat_id = callback['message']['chat']['id']
        query_data = callback['data']

        print(f"üì© –ü–æ–π–º–∞–ª callback_query: {query_data}", flush=True)

        if query_data.startswith("story_") or query_data in ["publish_photo", "publish_video"]:
            handle_story_action_callback(chat_id, query_data)
            return jsonify(success=True)

        callback_id = callback['id']

        requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery", json={
            'callback_query_id': callback_id
        })

        # üëá –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—à–∏—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        if query_data in ['publish', 'add_inserts', 'add_subtitles']:
            handle_callback_query(callback)
            return jsonify(success=True)

        if handle_callback_rating(query_data, chat_id):
            return jsonify(success=True)


        elif query_data == 'make_stories':
            keyboard = [
                [InlineKeyboardButton("10% —Å–∫–ª–µ–µ–∫", callback_data='stories_10'),
                 InlineKeyboardButton("30%", callback_data='stories_30')],
                [InlineKeyboardButton("50%", callback_data='stories_50'),
                 InlineKeyboardButton("100%", callback_data='stories_100')]
            ]
            reply_markup = {'inline_keyboard': [[btn.to_dict() for btn in row] for row in keyboard]}
            requests.post(TELEGRAM_API_URL, json={
                'chat_id': chat_id,
                'text': '–í—ã–±–µ—Ä–∏ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤—Å—Ç–∞–≤–æ–∫ –Ω—É–∂–Ω–æ: \ud83d\udd22',
                'reply_markup': reply_markup
            })

        elif query_data.startswith('stories_'):
            percent = int(query_data.split('_')[1])
            user_states[chat_id] = {'mode': 'stories_processing', 'inserts_percent': percent}
            send_message(chat_id, f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {percent}% –≤—Å—Ç–∞–≤–æ–∫. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ.")

        elif query_data == 'stories_ready':
            send_message(chat_id, "\U0001F4E4 –û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤—ã–π Stories –ø—Ä–∏–Ω—è—Ç. –ú–æ–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")

        elif query_data == 'make_reels':
            send_message(chat_id, "\U0001F3A5 –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É ‚Äî —Å–¥–µ–ª–∞—é Reels –ø–æ —à–∞–±–ª–æ–Ω—É.")
            user_states[chat_id] = {"mode": "capcut_generation"}

        elif query_data == 'voice':
            handle_voice(chat_id)
        elif query_data == 'text':
            handle_text(chat_id)
        elif query_data == 'image':
            handle_image(chat_id)
        elif query_data == 'plan':
            handle_plan(chat_id)
        elif query_data == 'pay':
            handle_pay(chat_id)
        elif query_data == 'support':
            handle_support(chat_id)
        elif query_data == 'smart_reels':
            send_message(chat_id, "üì≤ –£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Reels\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É. –Ø —Å–¥–µ–ª–∞—é: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é, —Ä–µ—Ä–∞–π—Ç, —Å—É–±—Ç–∏—Ç—Ä—ã, –≤–∏–¥–µ–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞, –æ–±–ª–æ–∂–∫—É –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
            keyboard = [
                [InlineKeyboardButton("\ud83d\udd24 –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", callback_data='transcribe'),
                 InlineKeyboardButton("\u270d\ufe0f –†–µ—Ä–∞–π—Ç", callback_data='rewrite')],
                [InlineKeyboardButton("\U0001F9E9 –í–∏–¥–µ–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞ CapCut", callback_data='capcut'),
                 InlineKeyboardButton("\U0001F39E –°—É–±—Ç–∏—Ç—Ä—ã", callback_data='subtitles')],
                [InlineKeyboardButton("\U0001F5BC –û–±–ª–æ–∂–∫–∞", callback_data='thumbnail'),
                 InlineKeyboardButton("\U0001F4E4 –ü–æ—Å—Ç–∏–Ω–≥", callback_data='publish')]
            ]
            reply_markup = {'inline_keyboard': [[btn.to_dict() for btn in row] for row in keyboard]}
            requests.post(TELEGRAM_API_URL, json={
                'chat_id': chat_id,
                'text': '–í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –≤–∏–¥–µ–æ \ud83d\udc47',
                'reply_markup': reply_markup
            })

        elif query_data == 'transcribe':
            user_states[chat_id] = 'transcribe'
            send_message(chat_id, "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.")
        elif query_data == 'rewrite':
            handle_rewrite(chat_id)
        elif query_data == 'capcut':
            handle_capcut(chat_id)
        elif query_data == 'subtitles':
            handle_subtitles(chat_id)
        elif query_data == 'thumbnail':
            handle_thumbnail(chat_id)
        elif query_data == 'publish':
            handle_publish(chat_id)
        elif query_data == 'use_as_post':
            handle_post_platform_selection(chat_id)
        elif query_data.startswith('post_'):
            generate_platform_post(chat_id, query_data.split('_')[1])
        elif query_data == 'rewrite_transcript':
            send_message(chat_id, "‚úçÔ∏è –û–∫–µ–π, –∑–∞–ø—É—Å–∫–∞—é —Ä–µ—Ä–∞–π—Ç —Ç–µ–∫—Å—Ç–∞!")
            handle_rewrite_transcript(chat_id)
        elif query_data == 'success':
            send_message(chat_id, "üåü –†–∞–¥, —á—Ç–æ –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å!")
        elif query_data == 'menu':
            send_message(chat_id, "üîô –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é. –ù–∞–ø–∏—à–∏ /menu")
        elif query_data == 'download_transcript':
            send_transcript_file(chat_id)

        return jsonify(success=True)

    if 'message' in data:
        message = data['message']
        chat_id = message['chat']['id']

        if 'voice' in message or 'audio' in message:
            file_id = message['voice']['file_id'] if 'voice' in message else message['audio']['file_id']
            handle_voice_transcription(chat_id, file_id)
            return jsonify(success=True)

        if 'video' in message or 'document' in message:
            file_id = message['video']['file_id'] if 'video' in message else message['document']['file_id']
            mode = user_states.get(chat_id, {}).get("mode")
            print(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ file_id: {file_id}, —Ä–µ–∂–∏–º: {mode}", flush=True)

            if mode == "single_processing":
                uid = str(uuid.uuid4())
                temp_path = f"uploads/{uid}.mp4"
                print(f"üì• –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ file_id: {file_id} ‚Üí {temp_path}", flush=True)
                download_telegram_file(file_id, temp_path)
                print(f"üì• single_processing: —Å–∫–∞—á–∞–ª —Ñ–∞–π–ª –≤ {temp_path}", flush=True)
                user_states[chat_id]["last_video_path"] = temp_path
                handle_single_video_processing(chat_id, temp_path)
                return jsonify(success=True)


            
            elif mode == "stories_multiple":
                from handlers.handlers_stories import process_stories_multiple
                user_states.setdefault(chat_id, {}).setdefault("video_files", []).append(file_id)
                count = len(user_states[chat_id]["video_files"])
            
                if count >= 2:
                    process_stories_multiple(chat_id, user_states[chat_id]["video_files"])
                    user_states[chat_id] = {}  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                else:
                    send_message(chat_id, f"üìπ –ü–æ–ª—É—á–µ–Ω–æ {count} –≤–∏–¥–µ–æ. –û—Ç–ø—Ä–∞–≤—å –µ—â—ë –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ.")
                return jsonify(success=True)

        
            elif mode == "publish_ready":
                send_message(chat_id, "üì§ –ü—Ä–∏–Ω—è—Ç–æ! –í–∏–¥–µ–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞).")
                return jsonify(success=True)
            
            elif mode == "stories_processing":
                handle_stories_pipeline(chat_id, file_id)
                return jsonify(success=True)

            
            if user_states.get(chat_id, {}).get("mode") == "capcut_generation":
                from handlers.handlers_runway import process_capcut_pipeline
                process_capcut_pipeline(chat_id, file_id)
                return jsonify(success=True)
            if user_states.get(chat_id) == 'transcribe':
                handle_transcribe_input(chat_id, message)
                return jsonify(success=True)

        if 'text' in message:
            text = message['text']
            
            if text == "üìñ Stories":
                send_story_action_buttons(chat_id)
                return jsonify(success=True)


            if text.strip() in ["1", "2", "3", "4", "1Ô∏è‚É£ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "2Ô∏è‚É£ –°—É–±—Ç–∏—Ç—Ä—ã", "3Ô∏è‚É£ –í—Å—Ç–∞–≤–∫–∏", "4Ô∏è‚É£ –í—Å—ë —Å—Ä–∞–∑—É"]:
                handle_user_choice(chat_id, text.strip())
                return


            elif text == "üé¨ REELS":
                send_message(chat_id, "üé¨ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É ‚Äî —Å–¥–µ–ª–∞—é Reels –ø–æ —à–∞–±–ª–æ–Ω—É.")
                user_states[chat_id] = {"mode": "capcut_generation"}
                return jsonify(success=True)
        
            elif text == "üé¨ –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤ Mp4":
                send_message(chat_id, "üé¨ –í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (YouTube, Reels, Shorts, Telegram, VK) ‚Äî —Å–∫–∞—á–∞—é –∏ –æ–±—Ä–∞–±–æ—Ç–∞—é.")
                user_states[chat_id] = {'mode': 'download_video'}
                return jsonify(success=True)
        
            elif text == "üß† –í—ã—Ç–∞—â–∏—Ç—å –¢–µ–∫—Å—Ç":
                send_message(chat_id, "üß† –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å –∏–ª–∏ –≤–∏–¥–µ–æ ‚Äî –≤—ã—Ç–∞—â—É —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Whisper.")
                user_states[chat_id] = {'mode': 'transcribe'}
                return jsonify(success=True)
        
            elif text == "üéô –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫":
                send_message(chat_id, "üåç –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ ‚Äî –ø–µ—Ä–µ–≤–µ–¥—É –Ω–∞ 3 —è–∑—ã–∫–∞.")
                user_states[chat_id] = {'mode': 'translate'}
                return jsonify(success=True)

        
            elif text == "üñº –§–æ—Ç–æ":
                send_message(chat_id, "üñº –û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ç–µ–º—É ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                user_states[chat_id] = {'mode': 'image_generation'}
                return jsonify(success=True)
        
            elif text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞":
                send_message(chat_id, "üí≥ –û–ø–ª–∞—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Make ‚Äî –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return jsonify(success=True)
        
            elif text == "üìÇ –ö–æ–Ω—Ç–µ–Ω—Ç":
                send_message(chat_id, "üìÇ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–≤–æ–∏—Ö –≤–∏–¥–µ–æ –∏ –ø–æ—Å—Ç–æ–≤. –ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
                return jsonify(success=True)
        
            elif text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
                send_message(chat_id, "üõ† –ù–∞–ø–∏—à–∏ –≤ @Staritsin –∏–ª–∏ –æ—Å—Ç–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å ‚Äî —è –ø–æ–º–æ–≥—É.")
                return jsonify(success=True)
            
            if user_states.get(chat_id) == 'transcribe':
                handle_transcribe_input(chat_id, text)
                return jsonify(success=True)
                
            if text.lower() == '/start':
                send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! \ud83d\udc4b –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç...\n–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ /menu \ud83d\ude0a")
            elif text.lower() == '/menu':
                from telegram import ReplyKeyboardMarkup
            
                keyboard = [
                    ["üé¨ –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –≤ Mp4", "üß† –í—ã—Ç–∞—â–∏—Ç—å –¢–µ–∫—Å—Ç"],
                    ["üìñ Stories", "üé¨ REELS"],
                    ["üñº –§–æ—Ç–æ", "üéô –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"],
                    ["üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", "üìÇ –ö–æ–Ω—Ç–µ–Ω—Ç", "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                requests.post(TELEGRAM_API_URL, json={
                    'chat_id': chat_id,
                    'text': '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? üëá',
                    'reply_markup': reply_markup.to_dict()
                })

                return jsonify(success=True)

            elif text.lower() == '/stats':
                from handlers.telegram_webhook_fix import handle_stats_request
                handle_stats_request(chat_id)
            elif text.lower() == '/help':
                send_message(chat_id, "\ud83d\udcda –ß—Ç–æ —è —É–º–µ—é:\n\n/menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/about ‚Äî –∫—Ç–æ —è –∏ –∑–∞—á–µ–º\n\n‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å –∏–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –∏ —è –≤—Å—ë –æ–±—Ä–∞–±–æ—Ç–∞—é!")
            elif text.lower() == '/about':
                send_message(chat_id, "\ud83e\udd16 –û–±–æ –º–Ω–µ:\n–Ø ‚Äî –±–æ—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –°—Ç–∞—Ä–∏—Ü–∏–Ω–∞, —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞.\n\n–Ø –ø–æ–º–æ–≥–∞—é —Ç–µ–±–µ:\n‚Äî —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å –∏ –≤–∏–¥–µ–æ\n‚Äî –¥–µ–ª–∞—Ç—å Reels –∏–∑ —à–∞–±–ª–æ–Ω–∞\n‚Äî –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã\n‚Äî —Ä–∞–±–æ—Ç–∞—Ç—å —Å CapCut, Telegram, Instagram\n\n\ud83c\udf10 –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://revolife.ru")
            
            # üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ
            if chat_id in user_states and "last_video_path" in user_states[chat_id]:
                video_path = user_states[chat_id]["last_video_path"]
                from handlers.handlers_buttons import handle_user_choice
                handle_user_choice(chat_id, text, video_path)
                return jsonify(success=True)

            else:
                send_message(chat_id, "‚ùì –ù–µ –ø–æ–Ω—è–ª –≤—ã–±–æ—Ä. –ù–∞–ø–∏—à–∏ /menu –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
                return jsonify(success=True)
                
        return 'OK', 200  # <-- –≠–¢–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û

            

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000, threaded=True)



