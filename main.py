
from flask import Flask, request, jsonify
import requests
import yt_dlp
import re
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from handlers.handlers_video import handle_video
from handlers.handlers_reels import handle_transcribe
from handlers.handlers_rewrite import handle_rewrite
from handlers.handlers_capcut import handle_capcut
from handlers.handlers_subtitles import handle_subtitles
from handlers.handlers_thumbnail import handle_thumbnail
from handlers.handlers_publish import handle_publish
from handlers.handlers_voice import handle_voice
from handlers.handlers_text import handle_text
from handlers.handlers_image import handle_image
from handlers.handlers_plan import handle_plan
from handlers.handlers_pay import handle_pay
from handlers.handlers_support import handle_support
from handlers.utils import TELEGRAM_API_URL  # –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
from handlers.handlers_transcribe import (
    handle_transcribe_mode,
    handle_transcribe_input
)



app = Flask(__name__)
BOT_TOKEN = os.environ.get('BOT_TOKEN')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
TELEGRAM_API_URL = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
TELEGRAM_FILE_API = f'https://api.telegram.org/file/bot{BOT_TOKEN}/'

@app.route('/')
def index():
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!'

@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    data = request.get_json()
    print("üî• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram:", data)

    # üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
    if 'callback_query' in data:
        callback = data['callback_query']
        chat_id = callback['message']['chat']['id']
        query_data = callback['data']
        callback_id = callback['id']

        requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery", json={
            'callback_query_id': callback_id
        })

        if query_data == 'video':
            handle_video(chat_id)
        elif query_data == 'voice':
            handle_voice(chat_id)
        elif query_data == 'text':
            handle_text(chat_id)
        elif query_data == 'image':
            handle_image(chat_id)
        elif query_data == 'plan':
            handle_plan(chat_id)
        elif query_data == 'pay':
            handle_pay(chat_id)
        elif query_data == 'support':
            handle_support(chat_id)
        elif query_data == 'smart_reels':
            send_message(chat_id, "üì≤ –£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Reels\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É. –Ø —Å–¥–µ–ª–∞—é: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é, —Ä–µ—Ä–∞–π—Ç, —Å—É–±—Ç–∏—Ç—Ä—ã, –≤–∏–¥–µ–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞, –æ–±–ª–æ–∂–∫—É –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")

            keyboard = [
                [InlineKeyboardButton("üî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", callback_data='transcribe'),
                 InlineKeyboardButton("‚úçÔ∏è –†–µ—Ä–∞–π—Ç", callback_data='rewrite')],
                [InlineKeyboardButton("üß© –í–∏–¥–µ–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞ CapCut", callback_data='capcut'),
                 InlineKeyboardButton("üéû –°—É–±—Ç–∏—Ç—Ä—ã", callback_data='subtitles')],
                [InlineKeyboardButton("üñº –û–±–ª–æ–∂–∫–∞", callback_data='thumbnail'),
                 InlineKeyboardButton("üì§ –ü–æ—Å—Ç–∏–Ω–≥", callback_data='publish')]
            ]
            reply_markup = {'inline_keyboard': [[btn.to_dict() for btn in row] for row in keyboard]}
            requests.post(TELEGRAM_API_URL, json={
                'chat_id': chat_id,
                'text': '–í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –≤–∏–¥–µ–æ üëá',
                'reply_markup': reply_markup
            })

        elif query_data == 'transcribe':
            handle_transcribe(chat_id)
        elif query_data == 'rewrite':
            handle_rewrite(chat_id)
        elif query_data == 'capcut':
            handle_capcut(chat_id)
        elif query_data == 'subtitles':
            handle_subtitles(chat_id)
        elif query_data == 'thumbnail':
            handle_thumbnail(chat_id)
        elif query_data == 'publish':
            handle_publish(chat_id)

        return jsonify(success=True)

    # üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if 'message' in data:
        message = data['message']
        chat_id = message['chat']['id']

        # üéû –í–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, mp4, mov)
        if 'video' in message or 'document' in message:
            if user_states.get(chat_id) == 'transcribe':
                handle_transcribe_input(chat_id, message)
                return jsonify(success=True)

        # üí¨ –¢–µ–∫—Å—Ç
        if 'text' in message:
            text = message['text']

            if user_states.get(chat_id) == 'transcribe':
                handle_transcribe_input(chat_id, text)
                return jsonify(success=True)

            if text.lower() == '/start':
                reply = (
                    "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç..."
                    "\n–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ /menu üòä"
                )
                send_message(chat_id, reply)

            elif text.lower() == '/menu':
                keyboard = [
                    [InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ", callback_data='video'),
                     InlineKeyboardButton("üéß –ì–æ–ª–æ—Å", callback_data='voice')],
                    [InlineKeyboardButton("‚úçÔ∏è –¢–µ–∫—Å—Ç", callback_data='text'),
                     InlineKeyboardButton("üñº –ö–∞—Ä—Ç–∏–Ω–∫–∏", callback_data='image')],
                    [InlineKeyboardButton("üìÖ –ü–ª–∞–Ω", callback_data='plan'),
                     InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data='pay')],
                    [InlineKeyboardButton("üì≤ –£–º–Ω—ã–π Reels", callback_data='smart_reels')],
                    [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')]
                ]
                reply_markup = {'inline_keyboard': [[btn.to_dict() for btn in row] for row in keyboard]}
                requests.post(TELEGRAM_API_URL, json={
                    'chat_id': chat_id,
                    'text': '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? üëá',
                    'reply_markup': reply_markup
                })

            else:
                send_message(chat_id, "‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!")

    return jsonify(success=True)
















@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    data = request.get_json()
  
    print("üî• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram:", data)

    if 'message' in data:
        chat_id = data['message']['chat']['id']
        send_message(chat_id, "‚úÖ –ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!")
          
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    if 'callback_query' in data:
        callback = data['callback_query']
        chat_id = callback['message']['chat']['id']
        query_data = callback['data']
        callback_id = callback['id']

    requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery", json={
        'callback_query_id': callback_id
    })

    if query_data == 'video':
        handle_video(chat_id)
    elif query_data == 'voice':
        handle_voice(chat_id)
    elif query_data == 'text':
        handle_text(chat_id)
    elif query_data == 'image':
        handle_image(chat_id)
    elif query_data == 'plan':
        handle_plan(chat_id)
    elif query_data == 'pay':
        handle_pay(chat_id)
    elif query_data == 'support':
        handle_support(chat_id)
    elif query_data == 'smart_reels':
        send_message(chat_id, "üì≤ –£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Reels\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É. –Ø —Å–¥–µ–ª–∞—é: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é, —Ä–µ—Ä–∞–π—Ç, —Å—É–±—Ç–∏—Ç—Ä—ã, –≤–∏–¥–µ–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞, –æ–±–ª–æ–∂–∫—É –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")
        keyboard = [
            [
                InlineKeyboardButton("üî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", callback_data='transcribe'),
                InlineKeyboardButton("‚úçÔ∏è –†–µ—Ä–∞–π—Ç", callback_data='rewrite')
            ],
            [
                InlineKeyboardButton("üß© –í–∏–¥–µ–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞ CapCut", callback_data='capcut'),
                InlineKeyboardButton("üéû –°—É–±—Ç–∏—Ç—Ä—ã", callback_data='subtitles')
            ],
            [
                InlineKeyboardButton("üñº –û–±–ª–æ–∂–∫–∞", callback_data='thumbnail'),
                InlineKeyboardButton("üì§ –ü–æ—Å—Ç–∏–Ω–≥", callback_data='publish')
            ]
        ]
        reply_markup = {'inline_keyboard': [[btn.to_dict() for btn in row] for row in keyboard]}
        requests.post(TELEGRAM_API_URL, json={
            'chat_id': chat_id,
            'text': '–í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –≤–∏–¥–µ–æ üëá',
            'reply_markup': reply_markup
        })
    elif query_data == 'transcribe':
        handle_transcribe(chat_id)
    elif query_data == 'rewrite':
        handle_rewrite(chat_id)
    elif query_data == 'capcut':
        handle_capcut(chat_id)
    elif query_data == 'subtitles':
        handle_subtitles(chat_id)
    elif query_data == 'thumbnail':
        handle_thumbnail(chat_id)
    elif query_data == 'publish':
        handle_publish(chat_id)


        return jsonify(success=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if 'message' in data:
        message = data['message']
        chat_id = message['chat']['id']

        if 'video' in message or 'document' in message:
            if user_states.get(chat_id) == 'transcribe':
                handle_transcribe_input(chat_id, message)
                return jsonify(success=True)

        if 'text' in message:
            text = message['text']

            if user_states.get(chat_id) == 'transcribe':
                handle_transcribe_input(chat_id, text)
                return jsonify(success=True)

            if text.lower() == '/start':
                reply = (
                    "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç..."
                    "\n–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ /menu üòä"
                )
                send_message(chat_id, reply)

            elif text.lower() == '/menu':
                keyboard = [
                    [InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ", callback_data='video'),
                     InlineKeyboardButton("üéß –ì–æ–ª–æ—Å", callback_data='voice')],
                    [InlineKeyboardButton("‚úçÔ∏è –¢–µ–∫—Å—Ç", callback_data='text'),
                     InlineKeyboardButton("üñº –ö–∞—Ä—Ç–∏–Ω–∫–∏", callback_data='image')],
                    [InlineKeyboardButton("üìÖ –ü–ª–∞–Ω", callback_data='plan'),
                     InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data='pay')],
                    [InlineKeyboardButton("üì≤ –£–º–Ω—ã–π Reels", callback_data='smart_reels')],
                    [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')]
                ]
                reply_markup = {'inline_keyboard': [[btn.to_dict() for btn in row] for row in keyboard]}
                requests.post(TELEGRAM_API_URL, json={
                    'chat_id': chat_id,
                    'text': '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? üëá',
                    'reply_markup': reply_markup
                })

    return jsonify(success=True)

    if 'callback_query' in data:
        callback = data['callback_query']
        chat_id = callback['message']['chat']['id']
        query_data = callback['data']
        callback_id = callback['id']

        requests.post(f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery", json={
            'callback_query_id': callback_id
        })

    if query_data == 'video':
        handle_video(chat_id)
    elif query_data == 'voice':
        handle_voice(chat_id)
    elif query_data == 'text':
        handle_text(chat_id)
    elif query_data == 'image':
        handle_image(chat_id)
    elif query_data == 'plan':
        handle_plan(chat_id)
    elif query_data == 'pay':
        handle_pay(chat_id)
    elif query_data == 'support':
        handle_support(chat_id)
    elif query_data == 'smart_reels':
        send_message(chat_id, "üì≤ –£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Reels\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É. –Ø —Å–¥–µ–ª–∞—é: —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é, —Ä–µ—Ä–∞–π—Ç, —Å—É–±—Ç–∏—Ç—Ä—ã, –≤–∏–¥–µ–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞, –æ–±–ª–æ–∂–∫—É –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")
        keyboard = [
            [
                InlineKeyboardButton("üî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", callback_data='transcribe'),
                InlineKeyboardButton("‚úçÔ∏è –†–µ—Ä–∞–π—Ç", callback_data='rewrite')
            ],
            [
                InlineKeyboardButton("üß© –í–∏–¥–µ–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞ CapCut", callback_data='capcut'),
                InlineKeyboardButton("üéû –°—É–±—Ç–∏—Ç—Ä—ã", callback_data='subtitles')
            ],
            [
                InlineKeyboardButton("üñº –û–±–ª–æ–∂–∫–∞", callback_data='thumbnail'),
                InlineKeyboardButton("üì§ –ü–æ—Å—Ç–∏–Ω–≥", callback_data='publish')
            ]
        ]
        reply_markup = {'inline_keyboard': [[btn.to_dict() for btn in row] for row in keyboard]}
        requests.post(TELEGRAM_API_URL, json={
            'chat_id': chat_id,
            'text': '–í—ã–±–µ—Ä–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –≤–∏–¥–µ–æ üëá',
            'reply_markup': reply_markup
        })
    elif query_data == 'transcribe':
        handle_transcribe(chat_id)
    elif query_data == 'rewrite':
        handle_rewrite(chat_id)
    elif query_data == 'capcut':
        handle_capcut(chat_id)
    elif query_data == 'subtitles':
        handle_subtitles(chat_id)
    elif query_data == 'thumbnail':
        handle_thumbnail(chat_id)
    elif query_data == 'publish':
        handle_publish(chat_id)

    return jsonify(success=True)

def send_message(chat_id, text):
    requests.post(TELEGRAM_API_URL, json={
        'chat_id': chat_id,
        'text': text
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000)
